### lesson 3 - creating a Context

    const ThemeContext = createContext();

    class ThemeContextProvider extends Component {
        state = { ... }
        render() { 
            return (
                <ThemeContext.Provider value={{ ...this.state }}>
                    {this.props.children}
                </ThemeContext.Provider>
            );
        }
    }

    export default ThemeContextProvider;

### lesson 4 - using contextType
- class components only
- access contextType value via this.context

    static contextType = ThemeContext;

    render() { 
        const { isLightTheme, light, dark } = this.context;
        const theme = isLightTheme ? light : dark;
        return ();
    }

### lesson 5 - using Context.Consumer
- class & functional components
- allows you to consume multiple contexts in one component

    render() { 
        return ( 
            <ThemeContext.Consumer>{(context) => {
                const { isLightTheme, light, dark } = context;
                const theme = isLightTheme ? light : dark;    
                return ();
            }}
            </ThemeContext.Consumer>
        );
    }

### lesson 6 - passing a method inside the Provider

    toggleTheme = () => {
        this.setState({ isLightTheme: !this.state.isLightTheme })
    }
    render() { 
        return (
            <ThemeContext.Provider value={{ ...this.state, toggleTheme: this.toggleTheme }}>
                {this.props.children}
            </ThemeContext.Provider>
        );
    }

### lesson 7 - creating multiple contexts

    function App() {
        return (
            <div className="App">
                <ThemeContextProvider>
                    <AuthContextProvider>
                        <Navbar />
                        <BookList />
                        <ThemeToggle />
                    </AuthContextProvider>
                </ThemeContextProvider>
            </div>
        );
    }

### lesson 8 - consuming multiple contexts
- you could have one static contextType and have a Consumer for the other context
- you also just have multiple consumers
- eventually, we will see how React Hooks makes this even easier

    <AuthContext.Consumer>{(authContext) => (
        <ThemeContext.Consumer>{(themeContext) => {
            const { isAuthenticated, toggleAuth } = authContext;
            const { isLightTheme, light, dark } = themeContext;
            const theme = isLightTheme ? light : dark;    
            return ();
        }}
        </ThemeContext.Consumer>
    )}
    </AuthContext.Consumer>

### lesson 13 - static contextType (cc) vs useContext (sfc)

    class BookList extends Component {
        static contextType = ThemeContext;
        render() { 
            const { isLightTheme, light, dark } = this.context;
            const theme = isLightTheme ? light : dark;
            return ();
        }
    }

    ---VS---

    const BookList = () => {
        const { isLightTheme, light, dark } = useContext(ThemeContext);
        const theme = isLightTheme ? light : dark;
        return ();
    }
